{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNryyqqoLsgAQcwamavyz9k",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MartinNde/MartinN_1/blob/main/Forex%20forcasted%20prices%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Pq3OuCC8STef"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Load the historical data into a Pandas DataFrame\n",
        "data = pd.read_csv('forex_data.csv')  # Replace 'forex_data.csv' with your actual file name\n",
        "\n",
        "# Prepare the features (X) and target variable (y)\n",
        "X = data[['Previous_Price']]  # Previous price column (can include additional features if available)\n",
        "y_pounds = data['Price_Pounds']  # Target variable: Dollar against Pounds\n",
        "y_euros = data['Price_Euros']  # Target variable: Dollar against Euros\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_pounds_train, y_pounds_test = train_test_split(X, y_pounds, test_size=0.2, random_state=0)\n",
        "X_train, X_test, y_euros_train, y_euros_test = train_test_split(X, y_euros, test_size=0.2, random_state=0)\n",
        "\n",
        "# Create and train the linear regression model for Dollar against Pounds\n",
        "model_pounds = LinearRegression()\n",
        "model_pounds.fit(X_train, y_pounds_train)\n",
        "\n",
        "# Create and train the linear regression model for Dollar against Euros\n",
        "model_euros = LinearRegression()\n",
        "model_euros.fit(X_train, y_euros_train)\n",
        "\n",
        "# Predict the forex market prices\n",
        "pounds_predictions = model_pounds.predict(X_test)\n",
        "euros_predictions = model_euros.predict(X_test)\n",
        "\n",
        "# Calculate the root mean squared error (RMSE) for the predictions\n",
        "pounds_rmse = mean_squared_error(y_pounds_test, pounds_predictions, squared=False)\n",
        "euros_rmse = mean_squared_error(y_euros_test, euros_predictions, squared=False)\n",
        "\n",
        "# Print the RMSE for both predictions\n",
        "print(\"RMSE for Dollar against Pounds:\", pounds_rmse)\n",
        "print(\"RMSE for Dollar against Euros:\", euros_rmse)\n"
      ]
    }
  ]
}